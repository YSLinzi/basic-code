#include<bits/stdc++.h>
using namespace std;


void swap(int* a, int* b);
void InsertSort(int arr[],int len);
void quickSort(int arr[], int, int );

int main(void) {
	int arr[7] = {8, 3, 2, 0, 9, 1, 5};
	quickSort(arr, 0, 6);
	for(int i = 0; i<7; ++i)
		printf("%d ", arr[i]);
	return 0;
}
void swap(int &a, int &b){
	int temp;
	temp = a;
	a = b;
	b = temp;
}
//代码优化3：小区间插入排序  在区间长度小于10时改用插入排序
void InsertSort(int arr[],int len) {
	int key,i, j;
	for(i = 1; i<len; ++i ){
		key = arr[i];
		for( j = i-1;j>=0;j--){
			if(arr[j]>key)
				arr[j+1] = arr[j];
			else
				break;
		}
		arr[j+1] = key;
	}
}
void quickSort(int arr[], int l, int r){
	if(l>=r)
		return;
	//代码优化3
		if(r-l+1<10){
			InsertSort(arr,r-l+1);
			return;
		}
	//int i = l, j = r;
	//代码优化2：随机化。为了使时间复杂度达到期望值，可以每次随机选一个数作为基准数
	int i = l, j = r,pivot = rand()%(r-l+1)+l;
	swap(arr[i], arr[pivot]);
	int key = arr[l];
	while(i<j){
		while(i<j && arr[j]>= key)
			j--;
		//swap(arr[i],arr[j]);
		while(i<j && arr[i]<=key)
			i++;
		//swap(arr[j],arr[i]);
		//代码优化1.在左右分别找到需要交换的元素后，如果 i 和 j 相遇则与基准元素交换，否则，将 a[j]和 a[i]交换，使得交换的次数减少一半。 
		swap(arr[i], (i == j)?arr[l]:arr[j]);		
	}
	quickSort(arr,l,j-1);
	quickSort(arr,i+1,r);
}
