//通过回溯查表的方式寻找背包的组成
#include <iostream> 
using namespace std;

int w[1001], v[1001];//w 数组存储物品的重量， v 数组存储物品的价值 
int f[1001][1001];
int items[1001];
int m, n;

void findMax(){
	for(int i = 1; i<= n; ++i){
		for(int j = 1; j<= m; ++j){
			if(w[i]<= j)
				f[i][j] = max(f[i-1][j], f[i-1][j-w[i]]+v[i]);
			else
				f[i][j] = f[i-1][j];
		}
	} 
}
//求解最优解的情况 
void findWhat(int i, int j){
	if(i>= 0){
		if(f[i][j] == f[i-1][j]){
			items[i] = 0;
			findWhat(i-1, j);
		}
		else if(j-w[i]>=0 && f[i][j] == f[i-1][j-w[i]] + v[i]){
			items[i] = 1;
			findWhat(i-1, j-w[i]);
		}
	}
}
void print(){
	for(int i=0; i<= n; ++i){
		for(int j = 0; j<= m; ++j){
			cout<<f[i][j]<<' ';
		}
		cout<<endl;
	}
	cout<<endl;
	for(int i = 1; i<=n; ++i)
		if(items[i]>0)
			cout<<i<<' ';//被选中的物品的编号输出 
	cout<<endl;
}
int main(void){
	cin>>m>>n;//m 表示所能容纳的总重量， n 表示物品的数量 
	for(int i = 1; i<= n; ++i){
		cin>>w[i]>>v[i];
	}
	findMax();
	findWhat(n, m);
	print();
	return 0;
}
