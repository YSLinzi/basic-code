/* 
    加入备忘的递归算法为每一个子问题的解在表中记录一个表项.当在递归算法的执行中第一次遇到一个子问题时，
    就计算它的解并填入表中以后。以后每次遇到子问题时，只要查看返回表中先前填入的值即可。
*/
#include <iostream>
using namespace std;

int lookup_chain(int p[], int len, int **m, int **s, int i, int j){
	if(m[i][j]<INT_MAX)
		return m[i][j];
	if(i == j)
		m[i][j] = 0;
	else{
		for(int k = i; k<= j-1; k++){
			int q = lookup_chain(p, len, m, s, i, k)+lookup_chain(p,len, m, s, k+1, j)+p[i-1]*p[k]*p[j];
			if(q<m[i][j]){
				m[i][j] = q;
				s[i][j] = k;
			}
		}
	}
	return m[i][j];
}
int memoized_matrix_chain(int p[], int len, int **m,int **s){
	int n = len-1;
	for(int i=1; i<=n; ++i){
		for(int j = i; j<=n; ++j)
			m[i][j] = INT_MAX;
	}
	return lookup_chain(p,len, m, s,1, n);
}
void print_optimal_parens(int** s, int i, int j){
	if(i == j){
		cout<<"A";
	}
	else{
		cout<<"(";
		print_optimal_parens(s, i, s[i][j]);
		print_optimal_parens(s, s[i][j]+1, j);
		cout<<")";
	}
}
int main(void){
	int p[7] = {30, 35, 15, 5, 10, 20, 25};
	int **m,**s;
	m = new int*[7];
	s = new int*[7];
	for(int i = 1; i<7; ++i){
		m[i] = new int[7];
		s[i] = new int[7];
	}
	for(int i = 1; i<7; ++i){
		for(int j = 1; j<7; ++j){
			m[i][j] = 0;
			s[i][j] = 0;
		}
	}
	cout<<"最少次数为："<<memoized_matrix_chain(p, 7, m, s)<<endl;
	cout<<"***** M *****"<<endl;
	for(int i = 1; i<7; ++i){
		for(int j = 1; j<7; ++j)
			cout<<m[i][j]<<ends;
		cout<<endl;
	}
	cout<<"***** S *****"<<endl;
	for(int i = 1; i<7; ++i){
		for(int j = 1; j<7; ++j)
			cout<<s[i][j]<<ends;
		cout<<endl;
	}
	print_optimal_parens(s, 1, 6);
	return 0;
  }
