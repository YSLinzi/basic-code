//采用递归进行实现，则需要指数级时间Ω(2n)，因为中间有些重复计算。
#include <iostream>
using namespace std;

int recursive_matrix_chain(int p[], int len, int **m, int **s, int i, int j){
	if(i == j)
		m[i][j] = 0;
	else{
		int k;
		m[i][j] = INT_MAX;
		for(k = i; k<j; ++k){
			int temp = recursive_matrix_chain(p, len, m,s, i, k) + recursive_matrix_chain(p, len, m, s, k+1, j)+ p[i-1]*p[k]*p[j];
			if(temp<m[i][j]){
				m[i][j] = temp;
				s[i][j] = k;
			}
		}
	}
	return m[i][j];
}
void print_optimal_parens(int** s, int i, int j){
	if(i == j){
		cout<<"A";
	}
	else{
		cout<<"(";
		print_optimal_parens(s, i, s[i][j]);
		print_optimal_parens(s, s[i][j]+1, j);
		cout<<")";
	}
}
int main(void){
	int p[7] = {30, 35, 15, 5, 10, 20, 25};
	int **m,**s;
	m = new int*[7];
	s = new int*[7];
	for(int i = 1; i<7; ++i){
		m[i] = new int[7];
		s[i] = new int[7];
	}
	for(int i = 1; i<7; ++i){
		for(int j = 1; j<7; ++j){
			m[i][j] = 0;
			s[i][j] = 0;
		}
	}
	cout<<"最少次数为："<<recursive_matrix_chain(p,7, m, s, 1, 6)<<endl;
	cout<<"***** M *****"<<endl;
	for(int i = 1; i<7; ++i){
		for(int j = 1; j<7; ++j)
			cout<<m[i][j]<<ends;
		cout<<endl;
	}
	cout<<"***** S *****"<<endl;
	for(int i = 1; i<7; ++i){
		for(int j = 1; j<7; ++j)
			cout<<s[i][j]<<ends;
		cout<<endl;
	}
	print_optimal_parens(s, 1, 6);
	return 0;
}
