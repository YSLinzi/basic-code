//动态规划法 
#include <iostream> 
using namespace std;

int activity_select(int s[], int f[], int** c, int ** rec){
	for(int j = 1; j<12; ++j){
		for(int i = 0; i<j; ++i){
			for(int k = i+1; k<= j-1; k++){
					if(f[i]<= s[k] && f[k] <= s[j]){
						if(c[i][j] < c[i][k] + c[k][j] + 1){
							c[i][j] = c[i][k] + c[k][j] + 1;
							rec[i][j] = k;
						}
					}
			}
		}	
	}
	return c[1][11];
}
		
void print(int** rec, int i, int j){
	if(i<=j){
		print(rec, i, rec[i][j]);
		if(rec[i][j] != 0)
			cout<<'a'<<rec[i][j]<<' ';
	}
}
int main(void){
	int s[12] = {-1, 1, 3, 0, 5, 3, 5, 6, 8, 8, 2, 12};
	int f[12] = {-1, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14};
	int **c, **rec;
	c = new int*[12];
	rec = new int*[12];
	for(int i = 0; i<12; ++i){
		c[i] = new int[12];
		rec[i] = new int[12];
	}
	for(int i = 0; i<12; ++i){
		for(int j = 0; j<12; ++j){
			c[i][j] = 0;
			rec[i][j] = 0;
		}
	}
	cout<<activity_select(s, f, c, rec)<<endl;
	for(int i = 1; i<12; ++i){
		for(int j = 1; j<12; ++j){
			cout<<c[i][j]<<' ';
		}
		cout<<endl;
	}
	cout<<"最大子集是："<< c[1][11]+2<<endl;
	 cout<<"最大子集为: {a1 ";
	print(rec, 1, 11);
	cout<<"a11}";
}
