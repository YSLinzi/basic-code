#include <iostream>
#include <cstdlib>
#include <ctime>
using namespace std;

const int n = 8;
//从区间 A[p, q]中寻找第 i 小的元素 
int Partition(int A[], int, int);
int Random(int, int);
int Randomized_partition(int A[], int, int); 
int Randomized_select1(int A[], int, int, int );
int Randomized_select2(int A[], int, int, int );

int main(void){
	int A[n] = {0};
	srand((unsigned) time(NULL));
	for(int i = 0; i<n; ++i){
		A[i] = rand()%100;
		cout<<A[i]<<' ';
	}
	cout<<endl;
	cout<<Randomized_select1(A, 0, 5, 2)<<endl;
	cout<<Randomized_select2(A, 0, 5, 2)<<endl;
}
//随机选取 
int Random(int p, int r){
	int t = rand()%(r-p+1) + p;
	return t;
}
//分区 
int Partition(int A[], int p, int r){
	int val = A[r];
	int j = p-1;
	for(int i = p; i<r; ++i){
		if(A[i]<val){
			j++;
			swap(A[i], A[j]);
		}
	}
	swap(A[j+1], A[r]);
	return j+1;
}
//随机分区 
int Randomized_partition(int A[], int p, int r){
	int i = Random(p,r);
	swap(A[r], A[i]);
	return Partition(A, p, r);
}
//从区间 A[p, q]中寻找第 i 小的元素
//递归写法 
int Randomized_select1(int A[], int p, int r, int i){
	if(p==r)
		return A[p];
	int q = Randomized_partition(A, p, r);// 对[p,r]进行分区 
	int k = q-p+1;// k 表示第一个区间元素的个数 
	if(i == k)
		return A[q];
	else if(i<k)
		return Randomized_select1(A, p, q-1, i);
	else
		return Randomized_select1(A, q+1, r, i-k);
}
//迭代写法
int Randomized_select2(int A[], int p, int r, int i) {
	while(1){
		if(p==r)
			return A[p];
		int q = Randomized_partition(A, p, r);
		int k = q-p+1;
		if(i == k)
			return A[q];
		else if(i<k)
			r = q-1;//可以处理有重复的待查找数
			//q--； 如果是这样则有重复的寻找不出来
		else{
			q = p+1;
			i = i-k;
		}	 
	}
}
