//链表的创建、链表节点的插入、删除 
#include <stdio.h>
#include <malloc.h>
#include <stdlib.h>

typedef struct Node
{
	int data;//数据域 
	struct Node* pNext;//指针域 
}NODE, *P_NODE;

//函数声明
P_NODE create_list(void);
void traverse_list (P_NODE pHead);
bool insert_list (P_NODE, int, int) ;
bool delete_list(P_NODE, int, int*);
 
int main(void)
{
	P_NODE pHead;
	pHead = create_list();
	
	insert_list (pHead,2, 4);
	traverse_list (pHead);
	
	int val;
	if(delete_list(pHead, 3, &val))
	{
		printf("删除成功，您删除的元素是：%d\n", val);
	}
	else
	{
		printf("删除失败！\n");
	}
	traverse_list (pHead);
	return 0;	
}

P_NODE create_list(void) //创建一个非循环单链表，并将该链表的头结点的地址附在pHead上 
{
	int len;
	int i;
	int val;
	
	P_NODE pHead = (P_NODE)malloc(sizeof(NODE));
	if(pHead == NULL)
	{
		printf("分配失败！\n");
		exit(-1);
	}
		P_NODE pTail = pHead;
		pTail-> pNext = NULL;
	
	printf("请输入链表节点的个数：\n");
	scanf("%d", &len) ;
	
	for(i = 0; i<len; ++i)
	{
		printf("请输入第%d个节点的值：", i+1);
		scanf("%d", &val);
	
		P_NODE pNew = (P_NODE)malloc(sizeof(NODE));//每循环一次就造出一个新的节点 
		if(NULL == pNew)
		{
			printf("分配失败！\n");
			exit(-1);
		}
		pNew -> data = val;
		pTail -> pNext = pNew;
		pNew->pNext = NULL;
		pTail = pNew;	
	}
	return pHead;
}

void traverse_list (P_NODE pHead)//将链表的每一个数输出 
{
	P_NODE p = pHead->pNext;
	while(p != NULL)
	{
		printf("%d\n", p->data );
		p = p->pNext;
	}
}
//在pHead所指向链表的第pos个节点的前面插入一个新的的节点，该节点的值是val,并且pos的值是从1开始 
bool insert_list (P_NODE pHead, int pos, int val) 
{
	int i = 0;
	P_NODE p = pHead;
	while (NULL != p && i<pos-1)
	{
		p = p->pNext;
		++i;
	}
	if(i> pos-1 || NULL== p)
		return false;
		
	P_NODE pNew = (P_NODE)malloc (sizeof(NODE)) ;
	if (NULL == pNew)
	{
		printf("动态分配内存失败！\n");
		exit(-1);
	}
	pNew ->data = val;
	P_NODE q = p->pNext;
	p->pNext = pNew;
	pNew->pNext = q;
	
	return true;	 
}

bool delete_list(P_NODE pHead, int pos, int* pVal)//删除指定位置的节点 
{
	int i = 0;
	P_NODE p = pHead;
	
	while (NULL != p->pNext && i<pos-1)
	{
		p = p->pNext;
		++i;
	}
	if (i>pos-1 || NULL == p->pNext)
		return false;
	
	P_NODE q = p->pNext;
	*pVal = q->data;
	//删除p节点后面的节点 
	p->pNext = p->pNext ->pNext;
	free(q) ;
	q = NULL;
	
	return true;	
}

