#include <iostream>
using namespace std;
#define DBL_MAX    1.7976931348623158e+308

const int n = 5;//关键字 
double Optimal_BST(double *p, double *q, int n,double **e, double **w, int **root){
	for(int i = 1; i<=n+1; ++i){
		e[i][i-1] = q[i-1];
		w[i][i-1] = q[i-1];
	}
	for(int l = 1; l<=n; l++){//自底向上寻找最优子树 
		for(int i=1; i<=n-l+1; i++){
			int j = i+l-1;
			e[i][j] = DBL_MAX;
			w[i][j] = w[i][j-1] + p[j] + q[j];
			for(int r = i; r<=j; r++){//寻找最优根 
				double t = e[i][r-1] + e[r+1][j] +w[i][j];
				if(t<e[i][j]){
					e[i][j] = t;
					root[i][j] = r;
				}
			}
		}
	}
	return e[1][n];
}

void Construct_optimal_BST(int **root, int i, int j){
	if(i == 1 && j==n)
		printf("k%d为根\n",root[i][j]);
	if(i<j){
		int r = root[i][j];
		printf("k%d是k%d的左孩子\n", root[i][r -1], r);
		Construct_optimal_BST(root, i,r-1);
		if(r+1<j)
			printf("k%d是k%d的右孩子\n",root[r+1][j], r);
		Construct_optimal_BST(root, r+1,j);
	}
	if(i == j){
		printf("d%d是k%d的左孩子\n", i-1, i);
		printf("d%d是k%d的右孩子\n", i, i);
	}
	if(i>j)
		printf("d%d是k%d的右孩子\n",j,j);
}

int main(void){
	double p[6] = {0,0.15,0.10,0.05,0.10,0.20};
	double q[6] = {0.05,0.10,0.05,0.05,0.05,0.10};
	// 下标范围：e[1..n+1,0..n]  w[1..n+1,0..n] root[1..n,1..n] 
	double **e = new double *[n+2];
	for(int i = 0; i<= n+1; ++i){
		e[i] = new double [n+1];
	}
	double **w = new double*[n+2];
	for(int i = 0; i<= n+1; ++i){
		w[i] = new double[n+1];
	}
	int **root = new int *[n+1];
	for(int i = 0; i<=n; ++i){
		root[i] = new int[n+1];
	}
	//计算表 e 和 root 
	
	cout<<Optimal_BST(p,q,n,e,w,root)<<endl;
	cout<<"各个子树的期望代价如下所示："<<endl;
	for(int i = 1; i<=n+1; i++){
		for(int j = i-1; j<=n; ++j)
			cout<<e[i][j]<<' ';
		cout<<endl;
	}
	cout<<"最优期望搜索代价: "<<e[1][n]<<endl;
	cout<<"各个子树的根如下所示："<<endl;
	for(int i = 1; i<= n; ++i){
		for(int j = i; j<=n; ++j){
			cout<<root[i][j]<<" ";
		}
		cout<<endl; 
	}
	cout<<"最优二叉查找树如下所示："<<endl;
	Construct_optimal_BST(root,1,n);
	for(int i = 0; i<n+2; ++i){
		delete e[i];
		delete w[i];
		e[i] = NULL;
		w[i] = NULL;
		if(i != n+1){
			delete root[i];
			root[i] = NULL;
		}
	}
	delete []e,delete []w,delete []root;
	e = NULL, w= NULL, root = NULL;
	return 0;
}
