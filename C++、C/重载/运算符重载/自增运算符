#include <iostream>
using namespace std;

class CDemo{
	private:
		int n;
	public:
		CDemo(int i = 0):n(i){}
		CDemo & operator++();//用于前置形式
		CDemo operator++(int);//用于后置形式
		operator int(){//类型转换 
			return n;
		}
		//减减的定义为全局函数 
		friend CDemo & operator--(CDemo &);
		friend CDemo operator--(CDemo &, int);
    /*当然也可以不用全局函数
      CDemo & operator--();
		  CDemo operator--(int);
    */
};
CDemo &CDemo::operator++(){//前置++ 
	++n;
	return *this;
}
CDemo CDemo::operator++(int k){
	CDemo temp(*this);//记录修改之前的对象
	n++;
	return temp;//返回修改之前的对象 
}
CDemo & operator--(CDemo &d){//前置-- 
	d.n--;
	return d;
}
CDemo operator--(CDemo &d, int){//后置-- 
	CDemo temp(d);
	d.n--;
	return temp;
}
/*不用全局函数的--写法
CDemo & CDemo::operator--(){//前置-- 
	n--;
	return *this;
}
CDemo CDemo::operator--(int k){//后置-- 
	CDemo temp(*this);
	n--;
	return temp;
}
*/
int main(){
	CDemo d(5);
	cout<<(d++)<<',';
	cout<<d<<',';
	cout<<(++d)<<',';
	cout<<d<<endl;
	cout<<(d--)<<',';
	cout<<d<<',';
	cout<<(--d)<<',';
	cout<<d<<endl;
	return 0; 
}
