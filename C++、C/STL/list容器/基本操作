#include <iostream>
#include <list>
#include <algorithm>
using namespace std;

class A{
	private:
		int n;
	public:
		A(int t){
			n = t;
		}
		friend bool operator<(const A&, const A &);
		friend bool operator==(const A &a1, const A & a2);
		friend ostream &operator<<(ostream & o, const A &a);
};
bool operator<(const A &a1, const A &a2){
	return a1.n<a2.n;
}
bool operator==(const A &a1, const A &a2){
	return a1.n == a2.n;
}
ostream & operator<<(ostream & o, const A &a){
	o<<a.n;
	return o;
}
//定义函数模板 PrintList，打印列表中的对象 
template <class T>
void PrintList(const list<T> &lst){
	int temp = lst.size();
	if(temp>0){
		typename list<T>::const_iterator i;
		i = lst.begin();
		for(i = lst.begin(); i!=lst.end(); i++){
			cout<<*i<<",";
		}
	}
}
int main(){
	list<A>lst1,lst2;
	lst1.push_back(1);
	lst1.push_back(3);
	lst1.push_back(2);
	lst1.push_back(4);
	lst1.push_back(2);
	cout<<"1)";
	PrintList(lst1);
	cout<<endl;
	lst2.push_back(10);
	lst2.push_front(20);
	lst2.push_back(40);
	lst2.push_back(30);
	lst2.push_back(30);
	lst2.push_back(40);
	lst2.push_front(40);
	cout<<"2)";
	PrintList(lst2);
	cout<<endl;
	lst2.sort();
	cout<<"3)";
	PrintList(lst2);
	cout<<endl;
	lst2.pop_front();//去掉头部元素 
	cout<<"4)";
	PrintList(lst2);
	cout<<endl;
	lst1.remove(2);//删除所有和 2 相等的元素 
	cout<<"5)";
	PrintList(lst1);
	cout<<endl;
	lst2.unique();//删除所有和前一个元素相等的元素 
	cout<<"6)";
	PrintList(lst2);
	cout<<endl;
	lst1.merge(lst2);//合并 lst2到 lst1 并清空 lst2 
	cout<<"7)";
	PrintList(lst1);
	cout<<endl;
	cout<<"8)";
	PrintList(lst2);//合并后此时lst2已经变为空 
	cout<<endl;
	lst1.reverse();//逆序输出 
	cout<<"9)";
	PrintList(lst1);
	cout<<endl;
	
	lst2.push_back(100);
	lst2.push_back(200);
	lst2.push_back(300);
	lst2.push_back(400);
	list<A>::iterator p1, p2, p3;
	p1 = find(lst1.begin(), lst1.end(),3);//3这个元素的位置 
	p2 = find(lst2.begin(), lst2.end(),200);
	p3 = find(lst2.begin(), lst2.end(),400);
	lst1.splice(p1,lst2, p2, p3);//将[p2,p3)插入到 p1 之前，并从 lst2 中删除 [p2,p3)
	cout<<"11)" ;
	PrintList(lst1);
	cout<<endl;
	cout<<"12)";
	PrintList(lst2);
	cout<<endl;
	return 0;
}
